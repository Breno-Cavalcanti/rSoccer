# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nrf
else:
    import _nrf

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class NRF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nrf.NRF_swiginit(self, _nrf.new_NRF(*args))
    __swig_destroy__ = _nrf.delete_NRF

    def setup(self):
        return _nrf.NRF_setup(self)

    def setMessage(self, start, id, motorSpeed1, motorSpeed2, kickRet, batteryRet, stop):
        return _nrf.NRF_setMessage(self, start, id, motorSpeed1, motorSpeed2, kickRet, batteryRet, stop)

    def send(self, *args):
        return _nrf.NRF_send(self, *args)

    def recv(self):
        return _nrf.NRF_recv(self)

    def setRawBuffer(self, b1, b2, b3):
        return _nrf.NRF_setRawBuffer(self, b1, b2, b3)

    def sendRawBuffer(self):
        return _nrf.NRF_sendRawBuffer(self)

    def startSending(self):
        return _nrf.NRF_startSending(self)

    def stopSending(self):
        return _nrf.NRF_stopSending(self)

    def setNet(self, arg2):
        return _nrf.NRF_setNet(self, arg2)

# Register NRF in _nrf:
_nrf.NRF_swigregister(NRF)
DEFAULT_DEVICE_NAME_NRF = _nrf.DEFAULT_DEVICE_NAME_NRF
NRF_BUFFER_SIZE = _nrf.NRF_BUFFER_SIZE
_MSG_BEGIN = _nrf._MSG_BEGIN
_MSG_END = _nrf._MSG_END



