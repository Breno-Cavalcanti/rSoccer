# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nrf_Communication
else:
    import _nrf_Communication

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class nrf_Communication(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _nrf_Communication.nrf_Communication_swiginit(self, _nrf_Communication.new_nrf_Communication())
    __swig_destroy__ = _nrf_Communication.delete_nrf_Communication

    def setup(self, *args):
        return _nrf_Communication.nrf_Communication_setup(self, *args)

    def setSpeed(self, id, motorSpeed1, motorSpeed2, flags):
        return _nrf_Communication.nrf_Communication_setSpeed(self, id, motorSpeed1, motorSpeed2, flags)

    def setPosition(self, id, cur_pos_x, cur_pos_y, cur_angle, obj_pos_x, obj_pos_y, obj_angle, flags):
        return _nrf_Communication.nrf_Communication_setPosition(self, id, cur_pos_x, cur_pos_y, cur_angle, obj_pos_x, obj_pos_y, obj_angle, flags)

    def setConfigurationPID(self, id, kp, ki, kd, alfa, flags):
        return _nrf_Communication.nrf_Communication_setConfigurationPID(self, id, kp, ki, kd, alfa, flags)

    def sendSpeed(self, id, motorSpeed1, motorSpeed2, flags):
        return _nrf_Communication.nrf_Communication_sendSpeed(self, id, motorSpeed1, motorSpeed2, flags)

    def sendPosition(self, id, cur_pos_x, cur_pos_y, cur_angle, obj_pos_x, obj_pos_y, obj_angle, flags):
        return _nrf_Communication.nrf_Communication_sendPosition(self, id, cur_pos_x, cur_pos_y, cur_angle, obj_pos_x, obj_pos_y, obj_angle, flags)

    def sendConfigurationPID(self, id, kp, ki, kd, alfa, flags):
        return _nrf_Communication.nrf_Communication_sendConfigurationPID(self, id, kp, ki, kd, alfa, flags)

    def recv(self):
        return _nrf_Communication.nrf_Communication_recv(self)

    def getInfoRet(self, id):
        return _nrf_Communication.nrf_Communication_getInfoRet(self, id)

# Register nrf_Communication in _nrf_Communication:
_nrf_Communication.nrf_Communication_swigregister(nrf_Communication)
DEFAULT_DEVICE_NAME = _nrf_Communication.DEFAULT_DEVICE_NAME
NRF_BUFFER_SIZE = _nrf_Communication.NRF_BUFFER_SIZE
_MSG_BEGIN = _nrf_Communication._MSG_BEGIN
_MSG_END = _nrf_Communication._MSG_END
MSG_RETURN_POSITION = _nrf_Communication.MSG_RETURN_POSITION
MSG_RETURN_BATTERY = _nrf_Communication.MSG_RETURN_BATTERY
LENGHT_SPEED = _nrf_Communication.LENGHT_SPEED
LENGHT_PID = _nrf_Communication.LENGHT_PID
LENGHT_POSITIONS = _nrf_Communication.LENGHT_POSITIONS



